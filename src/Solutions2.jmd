__Applied Complex Analysis (2021)__

# Solution Sheet 2

----------

## Problem 1

1.

We have
$$
\sigma(A) \subseteq B(1,3) \cup B(2,3) \cup B(4,1)
$$
where $B(z_0,r)$ is the ball of radius $r$ around $z_0$.

Here's a depiction:
```julia
using ApproxFun, Plots, ComplexPhasePortrait, LinearAlgebra, DifferentialEquations
drawdisk!(z0, R) = plot!(θ-> real(z0) + R[1]*cos(θ), θ-> imag(z0) + R[1]*sin(θ), 0, 2π, fill=(0,:red), α = 0.2, legend=false)

A = [1 2 -1; -2 2 1; 0 1 4]

λ = eigvals(A)
p = plot()
drawdisk!(1,3)
drawdisk!(2,3)
drawdisk!(4,1)
scatter!(complex.(λ); label="eigenvalues",ratio=1.0)
scatter!(complex.(diag(A)); label="diagonals")
p
```

2.

We get
$$
\sigma(A) \subseteq B(1,2) \cup B(2,3) \cup B(4,2)
$$
```julia
λ = eigvals(A)
p = plot()
drawdisk!(1,2)
drawdisk!(2,3)
drawdisk!(4,2)
scatter!(complex.(λ); label="eigenvalues")
scatter!(complex.(diag(A)); label="diagonals", ratio=1.0)
p
```

3.

Because the spectrum live in the intersection of the two estimates, the sharpest bound is
$$
\sigma(A) \subseteq B(2,3)
$$
```julia
λ = eigvals(A)
p = plot()
drawdisk!(2,3)
scatter!(complex.(λ); label="eigenvalues")
scatter!(complex.(diag(A)); label="diagonals",ratio=1.0)
p
```

Thus we can take $2 + 3 \E^{\I \theta}$ as the contour.

## Problem 2

1.

Note that in the scalar case $u'' = a u$ we have the solution
$$
u(t) = u_0 \cosh \sqrt{a} t + v_0 {\sinh \sqrt{a} t \over \sqrt a}
$$
Write
$$
A = Q \begin{pmatrix} \lambda_1 \\ & \ddots \\
                        && \lambda_n \end{pmatrix}  Q^\top
$$
where $\lambda_k > 0$
and then the solution has the form, where $\gamma$ is a contour surrounding the eigenvalues and to the right of zero:
$$
\begin{align*}
    \vc u(t) &= Q \begin{pmatrix} \cosh \sqrt{\lambda_1} t \\ & \ddots \\
                        && \cosh \sqrt{\lambda_n} t  \end{pmatrix}  Q^\top \vc u_0 +
                        Q \begin{pmatrix} {\sinh \sqrt{\lambda_1} t \over \sqrt{\lambda_1}}\\ & \ddots \\
                        && {\sinh \sqrt{\lambda_n} t \over \sqrt{\lambda_n}} \end{pmatrix}  Q^\top \vc v_0 \\
              &= {1 \over 2 \pi \I} Q \begin{pmatrix}  \oint_\gamma {\cosh \sqrt{z} t  \dz \over z - \lambda_1}\\ & \ddots \\
                        &&  \oint_\gamma {\cosh \sqrt{z} t  \dz \over z - \lambda_n}\end{pmatrix}  Q^\top \vc u_0 \\
& \qquad +
                        {1 \over 2 \pi \I} Q \begin{pmatrix} \oint_\gamma {\sinh \sqrt{z} t \over \sqrt z} {\dz   \over z - \lambda_1}  \\ & \ddots \\
                        && \oint_\gamma {\sinh \sqrt{z} t \over \sqrt z} {\dz   \over z - \lambda_n}  \end{pmatrix}  Q^\top \vc v_0 \\
&= {1 \over 2 \pi \I} \oint_\gamma \cosh \sqrt{z} t   Q \begin{pmatrix}  (z - \lambda_1)^{-1}\\ & \ddots \\
                        &&    (z - \lambda_n)^{-1}\end{pmatrix}  Q^\top \vc u_0 \dz \\
&\qquad +  {1 \over 2 \pi \I} \oint_\gamma {\sinh \sqrt{z} t \over \sqrt z}   Q \begin{pmatrix}  (z - \lambda_1)^{-1}\\ & \ddots \\
                        &&    (z - \lambda_n)^{-1}\end{pmatrix}  Q^\top \vc v_0 \dz \\
&= {1 \over 2 \pi \I} \oint_\gamma \cosh \sqrt{z} t  (z I - A)^{-1} \vc u_0 \dz +  {1 \over 2 \pi \I} \oint_\gamma {\sinh \sqrt{z} t \over \sqrt z}   (z I - A)^{-1} \vc v_0 \dz
\end{align*}
$$

Here we verify the formulae numerically:
```julia
n = 5
A = randn(n,n)
A = A+ A' + 10I

λ, Q = eigen(A)
λ
```
```julia
norm(A - Q*Diagonal(λ)*Q')
```

Time-stepping solution:
```julia
u₀ = randn(n)
v₀ = randn(n)
uv = solve(ODEProblem((uv,_,t) -> [uv[n+1:end]; A*uv[1:n]], [u₀; v₀], (0.,2.)); reltol=1E-10);

t = 2.0
uv(t)[1:n]
```

Solution via diagonalization:
```julia
Q*Diagonal(cosh.(sqrt.(λ) .* t))*Q'*u₀ + Q*Diagonal(sinh.(sqrt.(λ) .* t) ./ sqrt.(λ))*Q'*v₀
```

Solution via elliptic integrals. We chose the ellipse to surround all the spectrum of our particular $A$ with eigenvalues:
```julia
periodic_rule(n) = 2π/n*(0:(n-1)), 2π/n*ones(n)

function ellipse_rule(n, a, b)
    θ = periodic_rule(n)[1]
    a*cos.(θ) + b*im*sin.(θ), 2π/n*(-a*sin.(θ) + im*b*cos.(θ))
end

function ellipse_f(f, A, n, z₀, a, b)
    z,w = ellipse_rule(n,a,b)
    z .+= z₀

    ret = zero(A)
    for j=1:n
        ret += w[j]*f(z[j])*inv(z[j]*I - A)
    end
    ret/(2π*im)
end

n = 50
ellipse_f(z -> cosh(sqrt(z)*t), A, n, 10.0, 7.0, 2.0)*u₀ +
    ellipse_f(z -> sinh(sqrt(z)*t)/sqrt(z), A, n, 10.0, 7.0, 2.0)*v₀
```

2.

I put the restriction in because of the $\sqrt z$ term, which look like it is not analytic on $(-\infty,0]$. However, this restriction was NOT necessary, since in fact $\cosh \sqrt z t$ and ${\sinh \sqrt z t \over \sqrt z}$ are entire:
```julia
phaseplot(-6..6, -3..3, z -> cosh(sqrt(z)))
```
```julia
phaseplot(-3..3, -3..3, z -> sinh(sqrt(z))/sqrt(z))
```

This follows from Taylor series, though I prefer the following argument: we have
$$
\cosh z = {\E^{z} + \E^{-z} \over 2}
$$
hence $\cosh{\I t } = \cos t = \cosh{-\I t}$. Therefore, on the possible branch cut $\cosh \sqrt z$ is continuous (hence analytic):
$$
\cosh \sqrt{x}_+ = \cosh \I \sqrt{|x|} = \cosh -\I \sqrt{|x|} = \cosh\sqrt{x}_-
$$
Similarly,
$$
\sinh z = {\E^z - \E^{-z} \over 2}
$$
implies $\sinh{\I t} = \I \sin t = - \I \sin(-t) = -\sinh{-\I t}$, which gives us continuity:
$$
{\sinh \sqrt{x}_+ \over \sqrt{x}_+} = {\sinh \I \sqrt{|x|} \over \I \sqrt{|x|}} = {\sinh(-\I \sqrt{|x|)} \over -\I \sqrt{|x|}} ={\sinh \sqrt{x}_- \over \sqrt{x}_-}
$$
furthermore, they are both bounded at zero, hence analytic there too.

Here's a numerical example:
```julia
n = 5
A = randn(n,n)
λ, V = eigen(A)
λ
```
```julia
norm(A - V*Diagonal(λ)*inv(V))
```
```julia
u₀ = randn(n)
v₀ = randn(n)
uv = solve(ODEProblem((uv,_,t) -> [uv[n+1:end]; A*uv[1:n]], [u₀; v₀], (0.,2.)); reltol=1E-10);

t = 2.0
uv(t)[1:n]
```
```julia
V*Diagonal(cosh.(sqrt.(λ) .* t))*inv(V)*u₀ +
   V*Diagonal(sinh.(sqrt.(λ) .* t) ./ sqrt.(λ))*inv(V)*v₀
```
Here's the solution using an elliptic integral:
```julia
n = 100
ellipse_f(z -> cosh(sqrt(z)*t), A, n, 0.0, 3.0, 3.0)*u₀ +
    ellipse_f(z -> sinh(sqrt(z)*t)/sqrt(z), A, n, 0.0, 3.0, 3.0)*v₀
```

## Problem 3

1.

We have
$$
{1 \over n} \sum_{j=0}^{n-1} g(\theta_j) = \sum_{k=0}^\infty g_k  {1 \over n} \sum_{j=0}^{n-1} \E^{\I k \theta_j}
$$
Define the $n$-th root of unity as $\omega = e^{2 \pi \I  \over n}$ (that is $\omega^n = 1$), and simplify
$$
\sum_{j=0}^{n-1} \E^{\I k \theta_j} =\sum_{j=0}^{n-1} e^{{2 \pi j \I k \over n}} =\sum_{j=0}^{n-1} \omega^{kj}= \sum_{j=0}^{n-1} (\omega^k)^j
$$
If $k$ is a multiple of $n$, then $\omega^k = 1$, and this sum is equal to $n$. If $k$ is not a multiple of $n$, use Geometric series:
$$
\sum_{j=0}^{n-1} (\omega^k)^j = {\omega^{nk} - 1 \over \omega^k -1} = {1^k - 1 \over \omega^k-1} = 0
$$

2.

From lecture 4, we have $|f_k| \leq M_r r^{-|k|}$ for any $1 \leq r < R$, where $M_r$ is the supremum of $f$ in an annulus $\{ z : r^{-1} < |z| < r \}$. Thus from the previous part we have (using geometric series)
$$
\left| {1 \over n} \sum_{j=0}^{n-1} g(\theta_j)  - { 1\over 2 \pi}	 \int_0^{2\pi} g(\theta) \D \theta \right| \leq \sum_{K=1}^\infty |f_{Kn}| + |f_{-Kn}| \leq 2M \sum_{K=1}^\infty r^{-Kn} = 2M_r {r^{-n} \over 1 - r^{-n}}.
$$
This is an upper bound that  decays exponentially fast.

3.

Note that $f(z) = 2 z/(4z - z^2 - 1)$ satisfies $f(\E^{\I \theta}) = g(\theta)$. This has two poles at $2 \pm \sqrt 3$:
```julia
f = z -> 2z/(4z-z^2-1)
f(exp(0.1im)) - 1/(2-cos(0.1))
```
Here's a phase plot showing the location of poles:
```julia
phaseplot(-5..5, -5..5, f)
```

```julia
2+sqrt(3), 2- sqrt(3), 1/(2+sqrt(3))
```

Note that $2+\sqrt 3 = 1/(2-\sqrt 3)$ so in the previous result, we take $R = 2+\sqrt 3$. For any $1 \leq r < 2+\sqrt 3$ we have
$$
M_r = {2 \over 4 - r - r^{-1}}
$$

Thus we get the upper bounds
$$
    {4 \over 4 - r - r^{-1}} {r^{-n} \over 1 - r^{-n}}
$$

Let's see how sharp it is:
```julia
periodic_rule(n) = 2π/n*(0:(n-1)), 2π/n*ones(n)

g = θ -> 1/(2 - cos(θ))

Q = sum(Fun(g, 0 .. 2π))

err = Float64[ (
            (θ, w) = periodic_rule(n);
            sum(w.*g.(θ)) - Q
        ) for n=1:30];

N = length(err)

scatter(abs.(err), yscale=:log10, label="true error", title="Trapezium error bounds", legend=:bottomleft)
r = 1.1
scatter!(4/(4-r-inv(r)) .* r.^(-(1:N)) ./ (1 .- r.^(-(1:N))), label = "r = $r")
r = 3.0
scatter!(4/(4-r-inv(r)) .* r.^(-(1:N)) ./ (1 .- r.^(-(1:N))), label = "r = $r")
r = 2+sqrt(3)  - 0.01
scatter!(4/(4-r-inv(r)) .* r.^(-(1:N)) ./ (1 .- r.^(-(1:N))), label = "r = $r")
```
